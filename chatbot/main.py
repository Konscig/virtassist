import json
import sys
from loguru import logger
from sqlalchemy import create_engine, select, func
from sqlalchemy.orm import Session
from vkbottle import Bot, Keyboard, Text, ABCRule
from vkbottle.bot import Message
from vkbottle.dispatch.rules.base import RegexRule
from vkbottle.http import aiohttp

from config import Config
from database import User, Question


class Permission(ABCRule[Message]):
    def __init__(self, user_ids: list):
        self.uids = user_ids

    async def check(self, event: Message):
        return event.from_id in self.uids


async def get_answer(question: str) -> str:
    async with aiohttp.ClientSession() as session:
        async with session.get(Config.QA_HOST) as response:
            answer = await response.text()
            return answer[:15]


def add_user(user_id: int) -> bool:
    with Session(engine) as session:
        user = session.scalar(select(User).where(User.id == user_id))
        if user is None:
            user = User(id=user_id, is_subscribed=True)
            session.add(user)
            session.commit()
            return True
        return False


def check_subscribing(user_id: int) -> bool:
    with Session(engine) as session:
        user = session.scalar(select(User).where(User.id == user_id))
        if user is None:
            return False
        return user.is_subscribed


def main_keyboard_choice(notify_text: str) -> str:
    return (
        Keyboard().add(Text(notify_text))
        .get_json()
    )


engine = create_engine(Config.SQLALCHEMY_DATABASE_URI)
bot = Bot(token=Config.ACCESS_GROUP_TOKEN)
bot.labeler.vbml_ignore_case = True
bot.labeler.custom_rules["permission"] = Permission


@bot.on.message(RegexRule("!send "), permission=[Config.SUPERUSER_VK_ID])
async def handler(message: Message):
    with Session(engine) as session:
        for user in session.scalars(select(User).where(User.is_subscribed)).all():
            try:
                await bot.api.messages.send(user_id=user.id, message=message.text[6:], random_id=0)
            except Exception as e:
                print(e)


@bot.on.message(text=["stats"], permission=[Config.SUPERUSER_VK_ID])
async def handler(message: Message):
    with Session(engine) as session:
        users_count = session.scalar(select(func.count(User.id)))
        users_with_questions_count = session.scalar(select(func.count(User.id)).where(User.questions.any()))
        questions_count = session.scalar(select(func.count(Question.id)))
        scores_avg = session.scalar(select(func.avg(Question.score)))
        await message.answer(
            message=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {users_with_questions_count}\n\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}\n"
                    f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {scores_avg}", random_id=0)


@bot.on.message(payload=[{"score": i} for i in range(1, 6)])
async def handler(message: Message):
    with Session(engine) as session:
        question = session.scalars(select(Question)
                                   .where(Question.user_id == message.from_id and Question.score is None)
                                   .order_by(Question.id.desc())).first()
        question.score = json.loads(message.payload)["score"]
        session.commit()
    await message.answer(
        message=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! ü§ó",
        random_id=0)


@bot.on.message(text=["–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"])
async def handler(message: Message):
    with Session(engine) as session:
        user = session.scalars(select(User).where(User.id == message.from_id)).first()
        user.is_subscribed = not user.is_subscribed
        session.commit()
        notify_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if user.is_subscribed else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
        await message.answer(
            message="–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ üéâ" if user.is_subscribed
            else "–¢–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ üò¢",
            keyboard=main_keyboard_choice(notify_text), random_id=0)


@bot.on.message()
async def handler(message: Message):
    is_user_added = add_user(message.from_id)
    notify_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if check_subscribing(message.from_id) else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
    if is_user_added:
        first_message = f"üëãüèª –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¢—é–º–ì–£, —Å–µ–π—á–∞—Å —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å... \n\n" \
                        f"–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞–±–æ—Ç—É, —Ç—ã —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π. " \
                        f"–Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¢—é–º–ì–£, " \
                        f"–æ–¥–Ω–∞–∫–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."
        await message.answer(
            message=first_message,
            keyboard=main_keyboard_choice(notify_text), random_id=0)
    answer = await get_answer(message.text)
    await message.answer(
        message=answer,
        keyboard=main_keyboard_choice(notify_text), random_id=0)
    with Session(engine) as session:
        user = session.scalars(select(User).where(User.id == message.from_id)).first()
        question = Question(question=message.text, answer=answer, user_id=user.id)
        session.add(question)
        session.commit()
    await message.answer(
        message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
        keyboard=(
            Keyboard(inline=True).add(Text("1", payload={"score": 1}))
            .add(Text("2", payload={"score": 2}))
            .add(Text("3", payload={"score": 3}))
            .add(Text("4", payload={"score": 4}))
            .add(Text("5", payload={"score": 5}))
        ), random_id=0)


if __name__ == "__main__":
    logger.remove()
    logger.add(sys.stderr, level="INFO")
    bot.run_forever()
