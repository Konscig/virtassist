import sys
from loguru import logger
from sqlalchemy import create_engine, select
from sqlalchemy.orm import Session
from vkbottle import Bot, Keyboard, Text, ABCRule
from vkbottle.bot import Message
from vkbottle.dispatch.rules.base import RegexRule
from config import Config
from database import User, Question


class Permission(ABCRule[Message]):
    def __init__(self, user_ids):
        if not isinstance(user_ids, list):
            user_ids = [user_ids]
        self.uids = user_ids

    async def check(self, event: Message):
        return event.from_id in self.uids


engine = create_engine(Config.SQLALCHEMY_DATABASE_URI)
bot = Bot(token=Config.ACCESS_GROUP_TOKEN)
bot.labeler.vbml_ignore_case = True
bot.labeler.custom_rules["permission"] = Permission


@bot.on.message(RegexRule("!send "), permission=Config.SUPERUSER_VK_ID)
async def handler(message: Message):
    with Session(engine) as session:
        for _user in session.scalars(select(User)):
            if _user.is_subscribed:
                try:
                    await bot.api.messages.send(user_id=_user.id, message=message.text[6:], random_id=0)
                except Exception as e:
                    print(e)


def add_user(user_id):
    with Session(engine) as session:
        user = User(id=user_id, dialog_iteration=0, is_subscribed=1)
        session.merge(user)
        session.commit()


def user_increment_iteration(user_id):
    with Session(engine) as session:
        user = session.scalar(select(User).where(User.id == user_id))
        user.dialog_iteration += 1
        session.commit()
        return user.dialog_iteration


# def check_subscribing(user_id):
#     with Session(engine) as session:
#         user = session.scalar(select(User).where(User.id == user_id))
#         if user is None:
#             return True
#         return user.is_subscribed


# def main_keyboard_choice(notify_text):
#     return (
#         Keyboard().add(Text(notify_text))
#         .get_json()
#     )


@bot.on.message(text=["–Ω–∞—á–∞—Ç—å", "start"])
async def handler(message: Message):
    add_user(message.from_id)
    # is_user_subscribed = check_subscribing(message.from_id)
    # notify_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if is_user_subscribed else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
    intro_message = f"üëãüèª –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¢—é–º–ì–£ –∏ —è —Ç–æ–ª—å–∫–æ —É—á—É—Å—å –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. " \
                     f"–í –±—É–¥—É—â–µ–º —è —Å–º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞—Å–∞—é—â–∏–µ—Å—è –Ω–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞, –∞ –ø–æ–∫–∞ —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–º–æ—â—å. " \
                      f"–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–∞–ª–∏ –∑–∞ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –≤ –¢—é–º–ì–£?\n\n" \
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, —Ç—ã —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π."
    keyboard_choice = (
        Keyboard(inline=True).add(Text("–•–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–ø—Ä–æ—Å–∞—Ö")).get_json()
    )
    await message.answer(
        message=intro_message,
        keyboard=keyboard_choice, random_id=0)


@bot.on.message(text=["—Ö–æ—á—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–ø—Ä–æ—Å–∞—Ö", "—Ö–æ—á—É –µ—â—ë —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–ø—Ä–æ—Å–∞—Ö"])
async def handler(message: Message):
    dialog_iteration = user_increment_iteration(message.from_id)
    if dialog_iteration == 6:
        with Session(engine) as session:
            user = session.scalars(select(User).where(User.id == message.from_id)).first()
            dialog_iteration = 1
            user.dialog_iteration = dialog_iteration
            session.commit()
    if dialog_iteration == 1:
        await message.answer(
            message="–†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫?", random_id=0)


@bot.on.message(text=["–±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—ã–ª–æ"])
async def handler(message: Message):
    dialog_iteration = user_increment_iteration(message.from_id)
    if dialog_iteration == 6:
        await message.answer(message="–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!", random_id=0)
        with Session(engine) as session:
            user = session.scalars(select(User).where(User.id == message.from_id)).first()
            if user.experience is None:
                await message.answer(message="–£ –º–µ–Ω—è –µ—Å—Ç—å –∫ —Ç–µ–±–µ –µ—â—ë –ø–∞—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤. –í–æ—Ç –ø–µ—Ä–≤—ã–π:\n\n"
                                             "–†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–¥–µ —Ç—ã –æ–±—ã—á–Ω–æ –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, "
                                             "–≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –≤ —Ö–æ–¥–µ –æ–±—É—á–µ–Ω–∏—è –≤ –¢—é–º–ì–£?", random_id=0)
            else:
                user.dialog_iteration += 1
                session.commit()
                if user.fantasies is None:
                    await message.answer(
                        message="–£ –º–µ–Ω—è –∫ —Ç–µ–±–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å. –ö–∞–∫–∏–º–∏, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å"
                                " –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∏–¥–µ–∞–ª–µ"
                                " –∏ –≤–∞–∂–Ω–∞ –ª–∏ —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∫ —É ChatGPT?",
                        random_id=0)


@bot.on.message()
async def handler(message: Message):
    if len(message.text) < 3:
        await message.answer(
            message="–¢–≤–æ–π –æ—Ç–≤–µ—Ç –º–µ–Ω—å—à–µ —Ç—Ä—ë—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", random_id=0)
        return
    dialog_iteration = user_increment_iteration(message.from_id)
    if dialog_iteration == 1:
        with Session(engine) as session:
            user = session.scalars(select(User).where(User.id == message.from_id)).first()
            user.dialog_iteration = 0
            session.commit()
    if dialog_iteration == 2:
        question = Question(question=message.text, user_id=message.from_id)
        with Session(engine) as session:
            session.add(question)
            session.commit()
        await message.answer(
            message="–ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç —Ç–µ–±–µ –¥–∞–ª–∏?", random_id=0)
    if dialog_iteration == 3:
        with Session(engine) as session:
            question = session.scalars(select(Question).where(Question.user_id == message.from_id).order_by(
                Question.id.desc()).limit(1)).first()
            question.answer = message.text
            session.commit()
        await message.answer(
            message="–ö—Ç–æ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å?", random_id=0)
    if dialog_iteration == 4:
        with Session(engine) as session:
            question = session.scalars(select(Question).where(Question.user_id == message.from_id).order_by(
                Question.id.desc()).limit(1)).first()
            question.department = message.text
            session.commit()
        keyboard_choice = (
            Keyboard(inline=True).add(Text("–û—Ç–ª–∏—á–Ω–æ")).row()
            .add(Text("–•–æ—Ä–æ—à–æ")).row()
            .add(Text("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ")).row()
            .add(Text("–ü–ª–æ—Ö–æ")).row()
            .add(Text("–£–∂–∞—Å–Ω–æ")).get_json()
        )
        await message.answer(
            message="–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –æ—Ç–≤–µ—Ç?",
            keyboard=keyboard_choice, random_id=0)
    if dialog_iteration == 5:
        with Session(engine) as session:
            question = session.scalars(select(Question).where(Question.user_id == message.from_id).order_by(
                Question.id.desc()).limit(1)).first()
            question.score = message.text
            session.commit()
        keyboard_choice = (
            Keyboard(inline=True).add(Text("–•–æ—á—É –µ—â—ë —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–ø—Ä–æ—Å–∞—Ö")).row()
            .add(Text("–ë–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—ã–ª–æ")).get_json()
        )
        await message.answer(
            message="–•–æ—á–µ—à—å –ª–∏ –µ—â—ë —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–ø—Ä–æ—Å–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–∞–ª–∏?",
            keyboard=keyboard_choice, random_id=0)
    if dialog_iteration == 7:
        with Session(engine) as session:
            user = session.scalars(select(User).where(User.id == message.from_id)).first()
            user.experience = message.text
            if user.fantasies is None:
                await message.answer(
                    message="–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –º–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å:\n\n"
                            "–ö–∞–∫–∏–º–∏, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–æ–ª–∂–µ–Ω –æ–±–ª–∞–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –∏–¥–µ–∞–ª–µ"
                            " –∏ –≤–∞–∂–Ω–∞ –ª–∏ —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∫ —É ChatGPT?",
                    random_id=0)
            else:
                user.dialog_iteration += 1
            session.commit()
    if dialog_iteration == 8:
        with Session(engine) as session:
            user = session.scalars(select(User).where(User.id == message.from_id)).first()
            user.fantasies = message.text
            session.commit()
        await message.answer(
            message="–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ! ü§ó", random_id=0)
        await message.answer(
            message="–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏—Ç—Å—è —á–µ–º –µ—â—ë –ø–æ–¥–µ–ª–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ ¬´–Ω–∞—á–∞—Ç—å¬ª. "
                    "–•–æ—á–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º? –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è @public222974741 (–Ω–∞ –º–æ–π –ø–∞–±–ª–∏–∫) üòâ", random_id=0)


# @bot.on.message(text=["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"])
# async def handler(message: Message):
#     with Session(engine) as session:
#         user = session.scalars(select(User).where(User.id == message.from_id)).first()
#         user.is_subscribed = not user.is_subscribed
#         session.commit()
#         notify_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if user.is_subscribed else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
#         await message.answer(
#             message="–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ üéâ" if user.is_subscribed
#             else "–¢–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ üò¢",
#             keyboard=main_keyboard_choice(notify_text), random_id=0)


if __name__ == "__main__":
    logger.remove()
    logger.add(sys.stderr, level="INFO")
    bot.run_forever()
