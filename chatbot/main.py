import asyncio
import json
import sys
import threading
import aiogram as tg
from loguru import logger
from sqlalchemy import create_engine, select, func
from sqlalchemy.orm import Session
import vkbottle as vk
from vkbottle.bot import Message as VKMessage
from vkbottle.dispatch.rules.base import RegexRule as VKRegexRule
from vkbottle.http import aiohttp
from config import Config
from database import User, Question


class Permission(vk.ABCRule[VKMessage]):
    def __init__(self, user_ids: list):
        self.uids = user_ids

    async def check(self, event: VKMessage):
        return event.from_id in self.uids


async def get_answer(question: str) -> str:
    async with aiohttp.ClientSession() as session:
        async with session.post(f"http://{Config.QA_HOST}/", json={"question": question}) as response:
            answer = await response.text()
            return answer


def add_user(vk_id: int = None, telegram_id: int = None) -> bool:
    with Session(engine) as session:
        if vk_id is not None:
            user = session.scalar(select(User).where(User.vk_id == vk_id))
        elif telegram_id is not None:
            user = session.scalar(select(User).where(User.telegram_id == telegram_id))
        else:
            raise Exception("vk_id and telegram_id can't be None at the same time")
        if user is None:
            user = User(vk_id=vk_id, telegram_id=telegram_id, is_subscribed=True)
            session.add(user)
            session.commit()
            return True
        return False


def check_subscribing(vk_id: int = None, telegram_id: int = None) -> bool:
    with Session(engine) as session:
        if vk_id is not None:
            user = session.scalar(select(User).where(User.vk_id == vk_id))
        elif telegram_id is not None:
            user = session.scalar(select(User).where(User.telegram_id == telegram_id))
        else:
            raise Exception("vk_id and telegram_id can't be None at the same time")
        if user is None:
            return False
        return user.is_subscribed


def vk_keyboard_choice(notify_text: str) -> str:
    return (
        vk.Keyboard().add(vk.Text(notify_text))
        .get_json()
    )


def tg_keyboard_choice(notify_text: str) -> tg.types.ReplyKeyboardMarkup:
    keyboard = tg.types.ReplyKeyboardMarkup()
    keyboard.add(tg.types.KeyboardButton(notify_text))
    return keyboard


engine = create_engine(Config.SQLALCHEMY_DATABASE_URI)
vk_bot = vk.Bot(token=Config.VK_ACCESS_GROUP_TOKEN)
vk_bot.labeler.vbml_ignore_case = True
vk_bot.labeler.custom_rules["permission"] = Permission
tg_bot = tg.Bot(token=Config.TG_ACCESS_TOKEN)
dispatcher = tg.Dispatcher(tg_bot)


@vk_bot.on.message(vk.dispatch.rules.base.RegexRule("!send "), permission=Config.VK_SUPERUSER_ID)
async def handler(message: VKMessage):
    with Session(engine) as session:
        for user in session.scalars(select(User).where(User.vk_id is not None)).all():
            try:
                if user.is_subscribed:
                    await vk_bot.api.messages.send(user_id=user.vk_id, message=message.text[6:], random_id=0)
            except Exception as e:
                logger.error(e)


@vk_bot.on.message(text=["stats"], permission=Config.VK_SUPERUSER_ID)
async def handler(message: VKMessage):
    with Session(engine) as session:
        users_count = session.scalar(select(func.count(User.id)))
        users_with_questions_count = session.scalar(select(func.count(User.id)).where(User.questions.any()))
        questions_count = session.scalar(select(func.count(Question.id)))
        scores_avg = session.scalar(select(func.avg(Question.score)))
        await message.answer(
            message=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {users_with_questions_count}\n\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}\n"
                    f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {scores_avg}", random_id=0)


@vk_bot.on.message(payload=[{"score": i} for i in range(1, 6)])
async def handler(message: VKMessage):
    with Session(engine) as session:
        user_id = session.scalars(select(User).where(User.vk_id == message.from_id)).first().id
        question = session.scalars(select(Question)
                                   .where(Question.user_id == user_id and Question.score is None)
                                   .order_by(Question.id.desc())).first()
        question.score = json.loads(message.payload)["score"]
        session.commit()
    await message.answer(
        message=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! ü§ó",
        random_id=0)


@vk_bot.on.message(text=["–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"])
async def handler(message: VKMessage):
    with Session(engine) as session:
        user = session.scalars(select(User).where(User.vk_id == message.from_id)).first()
        user.is_subscribed = not user.is_subscribed
        session.commit()
        notify_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if user.is_subscribed else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
        await message.answer(
            message="–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ üéâ" if user.is_subscribed
            else "–¢–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ üò¢",
            keyboard=vk_keyboard_choice(notify_text), random_id=0)


@vk_bot.on.message()
async def handler(message: VKMessage):
    is_user_added = add_user(vk_id=message.from_id)
    notify_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if check_subscribing(vk_id=message.from_id) else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
    if is_user_added or "–Ω–∞—á–∞—Ç—å" in message.text.lower() or "start" in message.text.lower():
        first_message = f"üëãüèª –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¢—é–º–ì–£, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üòâ\n\n" \
                        f"–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞–±–æ—Ç—É, —Ç—ã —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π. " \
                        f"–Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¢—é–º–ì–£, " \
                        f"–æ–¥–Ω–∞–∫–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –Ω–∏–∂–µ."
        await message.answer(
            message=first_message,
            keyboard=vk_keyboard_choice(notify_text), random_id=0)
        return
    processing = await message.answer(
        "–°–µ–π—á–∞—Å —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è...")
    answer = await get_answer(message.text)
    await vk_bot.api.messages.delete(message_ids=[processing.message_id], peer_id=message.peer_id, delete_for_all=True)
    if len(answer) == 0:
        await message.answer(
            message="–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?",
            keyboard=vk_keyboard_choice(notify_text), random_id=0)
        return
    await message.answer(
        message=answer,
        keyboard=vk_keyboard_choice(notify_text), random_id=0)
    with Session(engine) as session:
        user = session.scalars(select(User).where(User.vk_id == message.from_id)).first()
        question = Question(question=message.text, answer=answer, user_id=user.id)
        session.add(question)
        session.commit()
    await message.answer(
        message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
        keyboard=(
            vk.Keyboard(inline=True).add(vk.Text("1", payload={"score": 1}))
            .add(vk.Text("2", payload={"score": 2}))
            .add(vk.Text("3", payload={"score": 3}))
            .add(vk.Text("4", payload={"score": 4}))
            .add(vk.Text("5", payload={"score": 5}))
        ), random_id=0)


# @vk_bot.on.message(vk.dispatch.rules.base.RegexRule("!send "), permission=Config.VK_SUPERUSER_ID) –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞


# @vk_bot.on.message(text=["stats"], permission=Config.VK_SUPERUSER_ID) –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞


@dispatcher.callback_query_handler()
async def rate(callback_query: tg.types.CallbackQuery):
    with Session(engine) as session:
        user_id = session.scalars(select(User).where(User.telegram_id == callback_query['from']['id'])).first().id
        question = session.scalars(select(Question)
                                   .where(Question.user_id == user_id and Question.score is None)
                                   .order_by(Question.id.desc())).first()
        question.score = callback_query.data
        session.commit()
    await callback_query.answer(text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! ü§ó")


@dispatcher.message_handler(commands=['start'])
async def main(message: tg.types.Message):
    add_user(telegram_id=message['from']['id'])
    notify_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if check_subscribing(
        telegram_id=message['from']['id']) else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
    first_message = f"üëãüèª –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¢—é–º–ì–£, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üòâ\n\n" \
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞–±–æ—Ç—É, —Ç—ã —Ä–∞–∑—Ä–µ—à–∞–µ—à—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π. " \
                    f"–Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¢—é–º–ì–£, " \
                    f"–æ–¥–Ω–∞–∫–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏."
    await message.answer(
        text=first_message,
        reply_markup=tg_keyboard_choice(notify_text)
    )


@dispatcher.message_handler(text=["–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"])
async def telegram_handler(message: tg.types.Message):
    with Session(engine) as session:
        user = session.scalars(select(User).where(User.telegram_id == message['from']['id'])).first()
        user.is_subscribed = not user.is_subscribed
        session.commit()
        notify_text = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏" if user.is_subscribed else "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"
        await message.reply(
            "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ üéâ" if user.is_subscribed == True
            else "–¢–µ–±–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ üò¢",
            reply_markup=tg_keyboard_choice(notify_text))


@dispatcher.message_handler()
async def handler(message: tg.types.Message):
    if len(message['text']) > 1:
        processing = await message.answer(
            "–°–µ–π—á–∞—Å —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è...")
        answer = await get_answer(message["text"])
        await tg_bot.delete_message(message['chat']['id'], processing['message_id'])
        if len(answer) == 0:
            await message.answer(
                text="–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?")
            return
        await message.answer(text=answer)
        with Session(engine) as session:
            user = session.scalars(select(User).where(User.telegram_id == message["from"]["id"])).first()
            question = Question(question=message.text, answer=answer, user_id=user.id)
            session.add(question)
            session.commit()
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:",
            reply_markup=tg.types.InlineKeyboardMarkup().add(
                tg.types.InlineKeyboardButton(text="1", callback_data="1"),
                tg.types.InlineKeyboardButton(text="2", callback_data="2"),
                tg.types.InlineKeyboardButton(text="3", callback_data="3"),
                tg.types.InlineKeyboardButton(text="4", callback_data="4"),
                tg.types.InlineKeyboardButton(text="5", callback_data="5")
            ))


def launch_vk_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    vk_bot.run_forever()


def launch_telegram_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    tg.executor.start_polling(dispatcher, skip_updates=True)


if __name__ == "__main__":
    logger.remove()
    logger.add(sys.stderr, level="INFO")
    thread_vk = threading.Thread(target=launch_vk_bot)
    thread_tg = threading.Thread(target=launch_telegram_bot)
    thread_tg.start()
    thread_vk.start()
    thread_tg.join()
    thread_vk.join()
